#!/usr/bin/env python3

# ots-bean-check: Run OTS-specific checks on a Beancount file.
#
# Copyright (C) 2020, 2021  Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Run OTS-specific checks on a Beancount file.

Usage: './ots-bean-check foo.beancount'

Or more specifically:

Usage: './ots-bean-check --date foo.beancount'
Usage: './ots-bean-check --quote foo.beancount'

Currently, all this does is check the date ordering of entries or that our
quotes are correct.

If you use beancount.el, this is meant to be `beancount-check-program'; see
https://github.com/beancount/beancount/blob/master/editors/emacs/beancount.el
for more information.  You can set it up in your .emacs something like this:

  (setq beancount-check-program "/path/to/ots-bookkeeping/ots-bean-check")

  (let ((local-beancount
         (expand-file-name "~/src/beancount/editors/emacs/beancount.el")))
    (when (file-exists-p local-beancount)
      (load-file local-beancount)))

  (add-to-list 'auto-mode-alist '(".*\\.beancount" . beancount-mode))
"""

import re
import sys
from pathlib import Path
from typing import List, Tuple

import click

VERBOSE = False

# As we add functionality to this program, functions like this will
# stop printing errors to stderr, and raise exceptions or return lists
# of error points.  Furthermore, they'll take some kind of Beancount
# object as input.  But all that is in the future.


def check_date_order(fname: Path) -> int:
    """Print an error to stderr for every out-of-order date from INPUT.
    A date is out-of-order if it is earlier than the date preceding it.
    Return the number of out-of-order dates (thus, zero if none)."""
    if VERBOSE:
        print("Checking date order of %s" % fname)
    warn_type = "DATE-ORDER:"
    line_no = 0
    date_re = re.compile("^([0-9]{4})[-/]([0-9]{2})[-/]([0-9]{2})\\s+txn\\s+")
    num_problems = 0
    last_int = 0
    for line in fname.read_text().split("\n"):
        line_no += 1
        line = line.strip()
        m = date_re.match(line)
        if m is not None:
            this_int = int(m.group(1) + m.group(2) + m.group(3))
            if this_int < last_int:
                num_problems += 1
                sys.stderr.write(f"{fname}:{line_no} {warn_type} {line}\n")
            last_int = this_int
    return num_problems


def check_quotes(fname: Path) -> int:
    """Print an error to stderr for every quote problem in INPUT.

    Check for:
         * "" "foo"
         * transaction lines with only one set of quotes
    """
    if VERBOSE:
        print("Checking quotes of %s" % fname)
    num_probs = 0
    line_no = 0
    regexes = [re.compile(r'"" "')]
    for line in fname.read_text().split("\n"):
        line_no += 1
        if not line.startswith("20"):
            continue
        for reg in regexes:
            if reg.search(line):
                num_probs += 1
                warn_type = "BLANK PAYEE:"
                sys.stderr.write(f"{fname}:{line_no} {warn_type} {line}\n")
        if len((line + " ").split('"')) != 5:

            # skip non-transaction lines
            parts = line.split(" ")
            if parts[1] != "txn" and parts[1] != "*" and parts[1] != "!":
                continue
            num_probs += 1
            warn_type = "QUOTE COUNT:"
            sys.stderr.write(f"{fname}:{line_no} {warn_type} {line}\n")

    return num_probs


@click.command()
@click.option("--date", is_flag=True, help="check date order")
@click.option("--quote", is_flag=True, help="check quote formatting")
@click.option("--verbose", "-v", is_flag=True)
@click.argument("beancount", nargs=-1, required=True)
def cli(beancount: Tuple[str], date: bool, quote: bool, verbose: bool) -> None:
    global VERBOSE
    if verbose:
        VERBOSE = True

    beanpaths = [Path(f) for f in beancount]
    num_probs = 0

    # If user specifies no tests, run them all, otherwise only do the ones the
    # user specified.
    do_all = False
    if date or bool:
        do_all = True

    for beanfile in beanpaths:
        if date or do_all:
            num_probs += check_date_order(beanfile)
        if quote or do_all:
            num_probs += check_quotes(beanfile)


if __name__ == "__main__":
    cli()
