#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# Copyright (c) 2020 Open Tech Strategies, LLC
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# If you did not receive a copy of the GNU General Public License
# along with this program, see <http://www.gnu.org/licenses/>.

"""fill-1099: a script for filling out U.S. IRS 1099 PDF forms.

Usage:

  ./fill-1099 --payee-name=\"Jane Random\"                           \\
              --payee-street-address=\"street address here\"         \\
              --payee-location=\"city, state, zip, country\"         \\
              --payee-tid=\"payee's taxpayer ID (SSN or EIN) here\"  \\
              --amount=\"dollar amount here (without dollar sign)\"  \\
              --payer-ein=\"your org's ein here\"                    \\
              --payer-address-file=payer_address_file (see below)  \\
              --output-file=output_pdf_file                        \\
              blank_1099_form.pdf

The content of payer_address_file is just lines of text, e.g.:

  My Company, Inc
  123 Main Street
  Suite 401
  Springfield, ND  57062
  +1 (999) 999-9999

(without the indentation, of course).

NOTE: This is very much a work in progress.  It could be generalized
and otherwise improved, and perhaps we will do so some day.  There are
various places in this script that \"know\" things about 1099 layout.
"""

import io
import sys
import getopt
import pdfrw  # 'pip3 install pdfrw' if needed
import reportlab.pdfgen.canvas


class TextLine():
    """One line of text, to be placed at a particular X+Y position."""
    def __init__(self, text, x, y):
        self.text = text
        self.x = x
        self.y = y


class TextBlock():
    """A set of TextLines, to be treated as a block."""
    def __init__(self, *text_lines):
        """TEXT_LINES are TextLine objects."""
        self.text_lines = text_lines
    def write(self, canvas):
        """Write all the text lines in this block to CANVAS."""
        for t_line in self.text_lines:
            canvas.drawString(x=t_line.x, y=t_line.y, text=t_line.text)


def make_overlay(*text_blocks):
    """Make the overlay PDF that we \"draw onto\" the underlying 1099 PDF.
    Returns io.BytesIO."""
    buf = io.BytesIO()
    c = reportlab.pdfgen.canvas.Canvas(buf)
    cur_page = 1
    # The only way I know (so far) to go to a new page is to advance
    # from the page one is on.  So this loop names the specific pages
    # we want to draw on, and just does no-op advances between them.
    for target_page in (2, 3, 4, 6, 7):
        while cur_page < target_page:
            c.showPage()
            cur_page += 1
        for text_block in text_blocks:
            text_block.write(c)
    c.save()
    buf.seek(0)
    return buf


def place_overlay(blank_form_path, overlay):
    """Fill out a blank 1099 form with an overlay.  Return io.BytesIO."""
    blank_form_pdf = pdfrw.PdfReader(blank_form_path)
    overlay_pdf = pdfrw.PdfReader(overlay)
    for page, data in zip(blank_form_pdf.pages, overlay_pdf.pages):
        m = pdfrw.PageMerge().add(data)[0]
        pdfrw.PageMerge(page).add(m).render()
    filled_out_form = io.BytesIO()
    pdfrw.PdfWriter().write(filled_out_form, blank_form_pdf)
    filled_out_form.seek(0)
    return filled_out_form


def main():
    payee_name = None
    payee_street_address = None
    payee_location = None
    payee_tid = None
    amount = None
    payer_ein = None
    payer_address = None
    output_file = None
    blank_form = None

    try:
        (opts, args) = getopt.getopt(sys.argv[1:], "h?",
                                     [ "help",
                                       "usage",
                                       "payee-name=",
                                       "payee-street-address=",
                                       "payee-location=",
                                       "payee-tid=",
                                       "amount=",
                                       "payer-ein=",
                                       "payer-address-file=",
                                       "output-file=",
                                     ])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err))
        sys.stderr.write("\n")
        sys.exit(1)

    for opt, optarg in opts:
        if opt in ("-h", "-?", "--help", "--usage"):
            print(__doc__)
            sys.exit(0)
        elif opt in ("--payee-name",):
            payee_name = TextBlock(TextLine(optarg, 61, 585))
        elif opt in ("--payee-street-address",):
            payee_street_address = TextBlock(TextLine(optarg, 61, 550))
        elif opt in ("--payee-location",):
            payee_location = TextBlock(TextLine(optarg, 61, 514))
        elif opt in ("--payee-tid",):
            payee_tid = TextBlock(TextLine(optarg, 200, 632))
        elif opt in ("--amount",):
            amount = TextBlock(TextLine(optarg, 312, 664))
        elif opt in ("--payer-ein",):
            payer_ein = TextBlock(TextLine(optarg, 81, 632))
        elif opt in ("--payer-address-file",):
            with open(optarg) as f:
                lines=f.readlines()
            x = 61
            y = 722 # just the starting 'y' -- it decrements
            vert_step = 14
            text_lines = []
            for line in lines:
                text_lines.append(TextLine(line.strip(), x, y))
                y -= vert_step
            payer_address = TextBlock(*text_lines)
        elif opt in ("--output-file",):
            output_file = optarg

    if len(args) < 1:
        sys.stderr.write("ERROR: Need path to blank 1099 PDF as argument.\n")
        sys.stderr.write("       Run with '--help' to see usage.\n")
        sys.exit(1)
    elif len(args) > 1:
        sys.stderr.write("ERROR: Too many arguments.\n")
        sys.stderr.write("       Run with '--help' to see usage.\n")
        sys.exit(1)
    else:
        blank_form = args[0]

    overlay = make_overlay(payee_name, 
                           payee_street_address, 
                           payee_location, 
                           payee_tid, 
                           amount, 
                           payer_ein,
                           payer_address,)
    filled_out_form = place_overlay(blank_form, overlay)
    with open(output_file, 'wb') as f:
        f.write(filled_out_form.read())


if __name__ == "__main__":
    main()
