#!/usr/bin/env python3

"""Parse all the Digital Ocean bank statements in the directory, emit
a beancount file summarizing them from the point of view of the bank
account.

Digital Ocean automatically pulls from our bank account, so there's no
accounts payable needed.  We just have to record the transaction.

Edit parse.yml in the dir with the digital-ocean invoices.  The yaml
should evaluate to a dict with 3 fields: comment, credit, and debit.
Comment is a string that we stick in the comment field of every entry
we generate.  It has variables in curly braces that get interpolates.
Credit and debit are dicts.  Keys are regexes that hash to beancount
account names.  We use it to match descriptions to accounts.  If a
field == "default" it's a catchall that matches anything that hasn't
already matched.

"""

import argparse
import os
import re
import sys

import util as u
import yaml
from dateutil import parser as dateparse
from sort import sort_beancount_text

regex = {"charge_line": re.compile(r"\$\d*\.\d\d$")}


def parse(fspec, after):
    """Parse a statement file, return a list of dicts with each element
    having a descrip, amt, date, invoice_num, and run_total field.

    FSPEC is a file specification for a statement PDF.

    AFTER is a date after which we care about transactions.  Earlier
    ones will be ignored.
    """

    txt = u.pdf2txt(fspec)
    charges = []
    run_total = 0
    total = 0
    charge_total = 0
    invoice_num = 0
    date = "1900-01-01"
    for line in txt.split("\n"):
        if not line:
            continue
        if "Hours" in line and "Start" in line and "End" in line:
            category = line.split("  ")[0].strip()
            if category == "Droplet Backups":
                category = "Backup"
            elif category == "Droplet Snapshots":
                category = "Snapshot"
            else:
                category = category[:-1]
            continue
        if "Invoice Number" in line or "Invoice number:" in line:
            invoice_num = line.split(" ")[-1]
            continue
        if (
            "Date Issued" in line
            or "Date of issue:" in line
            or "Date of Issue:" in line
        ):
            invoice_date = " ".join(line.split(" ")[-3:])
            invoice_date = dateparse.parse(invoice_date)
            if invoice_date <= after:
                return []
            continue
        if "Payment due" in line:
            date = " ".join(line.split(" ")[-3:])
            date = dateparse.parse(date)
            if date <= after:
                return []
            continue
        if line.startswith("Final invoice for"):
            billing_period = " ".join(line.split(" ")[4:8])
            continue
        if regex["charge_line"].search(line):
            if line.startswith(" ") and "Total" in line:
                run_total += u.parse_money(line.strip().split(" ")[1])
            elif line.startswith("Total due") or line.startswith("Total Due"):
                continue
            elif line.startswith("Total usage charges"):
                amt = line.split(" ")[-1]
                total = u.parse_money(amt)
            else:
                parts = line.split(" ")
                amt = u.parse_money(parts[-1])
                descrip = "|".join(parts[:-1]).strip()
                while "||" in descrip:
                    descrip = descrip.replace("||", "|")
                charges.append(
                    {
                        "descrip": descrip,
                        "amt": amt,
                        "total": charge_total,
                        "category": category,
                        "invoice_num": invoice_num,
                        "date": date,
                        "invoice_date": invoice_date,
                        "billing_period": billing_period,
                    }
                )
                charge_total += amt

    # Sanity checks
    if total != 0:
        if run_total != 0:
            if total != run_total:
                u.err(
                    f"Parse error in {fspec}: invoice total ({total})"
                    + f" and running total ({run_total}) disagree"
                )
        if charge_total != 0:
            if total != charge_total:
                u.err(
                    f"Parse error in {fspec}: chargees total "
                    + f"({charge_total}) and invoice total ({total}) disagree"
                )
    if run_total != 0:
        if run_total != charge_total:
            u.err(
                f"Parse error in {fspec}: running total ({run_total})"
                + f" and charge total ({charge_total}) disagree"
            )
    if run_total + total == 0:
        u.err(f"Can't find any entries in {fspec}")

    if charge_total == 0:
        u.err(f"Couldn't parse any charges in {fspec}")

    if invoice_num == 0:
        u.err(f"Couldn't parse invoice number in {fspec}")

    if date == "1900-01-01":
        u.err(f"Couldn't prase date in {fspec}")

    return charges


def assign_to_account(accts, charge, regexes):
    """Assign a charge to a debit or credit account.

    ACCTS is a dict. Keys are beancount account names
    (e.g. "Expenses:Karl:James:Tech") and they hash to a running total
    of the amount in that account for this invoice.  One invoice = one
    transaction, so later on we can just turn all those acct keys into
    postings in our beancount entry.

    CHARGE is a dict containing information about one charge listed in
    the invoice.  CHARGE can have a variety of keys, but we only care
    about 'descrip' and 'amt.

    REGEXES is a dict. Keys are regular expressions.  They correspond
    to account names.  If CHARGE's description matches a regex, it's
    amount gets added to the corresponding account in ACCTS.

    """
    default = ""
    for reg, acct in regexes.items():
        if reg == "default":
            default = acct
            continue
        if re.search(reg, charge["descrip"]):
            accts[acct] = accts.get(acct, 0) + charge["amt"]
            return

    # We didn't find a matching account, so use the default account if
    # there is one.
    if default:
        accts[acct] = accts.get(acct, 0) + charge["amt"]
        return

    # Complain that we couldn't find an account
    u.err("Can't find matching account for charge: " + charge["descrip"])


def make_txs(charges, parse_info, fspec):
    """Return a string containing beancount entries.

    CHARGES is a list of the charges in the invoice.  Each charge is a
    dict containing information about one charge listed in the
    invoice.

    PARSE_INFO is the info loaded from parse.yml

    FSPEC is the path to the invoice.

    """

    template_data = {}
    template_data.update(charges[-1])  # grab invoice_num and billing period
    template_data["date"] = charges[0]["date"].strftime("%Y-%m-%d")
    template_data["fspec"] = fspec
    template_data["charges"] = "\n".join(
        [
            f"  {c['descrip'].split('|')[0]:40} {c['category']:8} {c['amt'].amount:>7}"
            for c in sorted(charges, key=lambda x: x["descrip"])
        ]
    )
    comment = parse_info["comment"].strip().format_map(template_data)
    comment = "\n".join(["    " + l for l in comment.split("\n")])

    # Build entry
    entry = (
        f'{template_data["date"]} txn "Digital Ocean" ""\n  comment: "\n{comment}"\n'
    )
    debits = {}
    credits = {}
    for charge in charges:
        assign_to_account(credits, charge, parse_info["credit"])
        assign_to_account(debits, charge, parse_info["debit"])
    for acct, amt in debits.items():
        entry += f"  {acct:60} {f'{amt.amount} {amt.currency}':>10}\n"
    for acct, amt in credits.items():
        entry += f"  {acct:59} {f'{amt.amount * -1} {amt.currency}':>10}\n"

    # Sanity check
    if sum([amt for acct, amt in debits.items()]) != sum(
        [amt for acct, amt in credits.items()]
    ):
        u.err(f"\nCredits and debits don't balance:\n\n{entry}")

    return entry


def main():
    parser = argparse.ArgumentParser(description="Parse Digital Ocean invoices.")
    parser.add_argument(
        "dir", nargs="?", default=".", help="Directory with statement PDFs"
    )
    parser.add_argument(
        "beancount",
        nargs="?",
        default="",
        help="Beancount file in which to place transactions",
    )
    parser.add_argument(
        "--write", "-w", action="store_true", help="Write new entries to beancount file"
    )
    args = parser.parse_args()

    direc = args.dir
    beancount = args.beancount
    if not os.path.isdir(direc):
        beancount = direc
        direc = "."
    after = dateparse.parse("1900-01-01")
    if beancount:
        after = u.bean_query(beancount, "select date").split("\n")[-1]
        after = dateparse.parse(after)
    parse_info = yaml.safe_load(u.slurp(os.path.join(direc, "parse.yml")))
    ret = ""
    for fname in os.listdir(direc):
        if not fname.endswith("pdf"):
            continue
        fspec = os.path.join(direc, fname)
        charges = parse(fspec, after)
        if charges:

            # Calculate a nice-looking path to the invoice
            fspec = os.path.abspath(fspec)
            if fspec.startswith(os.environ["OTS_DIR"]):
                fspec = fspec[len(os.environ["OTS_DIR"]) + 1 :]

            ret += make_txs(charges, parse_info, fspec)

    ret = sort_beancount_text(ret)

    if ret.strip():
        if beancount and args.write:
            with open(beancount, "a") as fh:
                fh.write("\n" + ret)
        else:
            print(ret)


if __name__ == "__main__":
    main()
